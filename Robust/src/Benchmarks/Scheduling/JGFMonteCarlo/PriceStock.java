/** Banboo Version  **/

/**************************************************************************
 *                                                                         *
 *         Java Grande Forum Benchmark Suite - Thread Version 1.0          *
 *                                                                         *
 *                            produced by                                  *
 *                                                                         *
 *                  Java Grande Benchmarking Project                       *
 *                                                                         *
 *                                at                                       *
 *                                                                         *
 *                Edinburgh Parallel Computing Centre                      *
 *                                                                         *
 *                email: epcc-javagrande@epcc.ed.ac.uk                     *
 *                                                                         *
 *      Original version of this code by Hon Yau (hwyau@epcc.ed.ac.uk)     *
 *                                                                         *
 *      This version copyright (c) The University of Edinburgh, 2001.      *
 *                         All rights reserved.                            *
 *                                                                         *
 **************************************************************************/

/**
 * Class to do the work in the Application demonstrator, in particular
 * the pricing of the stock path generated by Monte Carlo.  The run
 * method will generate a single sequence with the required statistics,
 * estimate its volatility, expected return rate and final stock price
 * value.
 *
 * @author H W Yau
 * @version $Revision: 1.1 $ $Date: 2008/08/18 22:22:21 $
 */
public class PriceStock{

    //------------------------------------------------------------------------
    // Instance variables.
    //------------------------------------------------------------------------
    /**
     * The Monte Carlo path to be generated.
     */
    private MonteCarloPath mcPath;
    /**
     * String identifier for a given task.
     */
    private String taskHeader;
    /**
     * Random seed from which the Monte Carlo sequence is started.
     */
    private long randomSeed;
    /**
     * Initial stock price value.
     */
    private float pathStartValue;
    /**
     * Object which represents the results from a given computation task.
     */
    private ToResult result;
    private float expectedReturnRate;
    private float volatility;
    private float volatility2;
    private float finalStockPrice;
    private float[] pathValue;

    //------------------------------------------------------------------------
    // Constructors.
    //------------------------------------------------------------------------
    /**
     * Default constructor.
     */
    public PriceStock() {
	this.taskHeader = "";
	this.randomSeed=-1;
	this.pathStartValue=(float)0.0;
	this.expectedReturnRate=(float)0.0;
	this.volatility=(float)0.0;
	this.volatility2=(float)0.0;
	this.finalStockPrice=(float)0.0;

	mcPath = new MonteCarloPath();
    }
    //------------------------------------------------------------------------
    // Methods.
    //------------------------------------------------------------------------
    //------------------------------------------------------------------------
    // Methods which implement the Slaveable interface.
    //------------------------------------------------------------------------
    /**
     * Method which is passed in the initialisation data common to all tasks,
     * and then unpacks them for use by this object.
     *
     * @param obj Object representing data which are common to all tasks.
     */
    public void setInitAllTasks(AppDemoRunner obj) {
	mcPath.set_name(obj.name);
	mcPath.set_startDate(obj.startDate);
	mcPath.set_endDate(obj.endDate);
	mcPath.set_dTime(obj.dTime);
	mcPath.set_returnDefinition(obj.returnDefinition);
	mcPath.set_expectedReturnRate(obj.expectedReturnRate);
	mcPath.set_volatility(obj.volatility);
	int nTimeSteps = obj.nTimeSteps;
	mcPath.set_nTimeSteps(nTimeSteps);
	this.pathStartValue = obj.pathStartValue;
	mcPath.set_pathStartValue(pathStartValue);
	mcPath.set_pathValue(new float[nTimeSteps]);
	mcPath.set_fluctuations(new float[nTimeSteps]);
    }
    /**
     * Method which is passed in the data representing each task, which then
     * unpacks it for use by this object.
     *
     * @param obj Object representing the data which defines a given task.
     */
    public void setTask(String header, long randomSeed) {
	this.taskHeader     = header;
	this.randomSeed     = randomSeed;
    }
    /**
     * The business end.  Invokes the necessary computation routine, for a
     * a given task.
     */
    public void run() {
	mcPath.computeFluctuationsGaussian(randomSeed);
	//System.printI(0xa0);
	mcPath.computePathValue(pathStartValue);
	//System.printI(0xa1);
	RatePath rateP = new RatePath(mcPath);
	//System.printI(0xa2);
	ReturnPath returnP = rateP.getReturnCompounded();
	//System.printI(0xa3);
	returnP.estimatePath();
	//System.printI(0xa4);
	expectedReturnRate = returnP.get_expectedReturnRate();
	volatility = returnP.get_volatility();
	volatility2 = returnP.get_volatility2();
	finalStockPrice = rateP.getEndPathValue();
	pathValue = mcPath.get_pathValue();
	//System.printI(0xa5);
    }
    /*
     * Method which returns the results of a computation back to the caller.
     *
     * @return An object representing the computed results.
     */
    public ToResult getResult() {
	String resultHeader = "Result of task with Header="+taskHeader+": randomSeed="+randomSeed+": pathStartValue="+(int)pathStartValue;
	ToResult res = new ToResult(resultHeader,expectedReturnRate,volatility,
		volatility2,finalStockPrice,pathValue);
	return res;
    }
}
