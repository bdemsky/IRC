/** readFromFile 
 ** This file is associated with the output generated from file SingleObjectMod.java
 ** This file reads the contents of the output files such as test_0, test_1 ...test_N
 ** generated by running the SingleObjectMod.java file
 **
 ** First execute SingleObjectMod.java in the following manner
 **./STATSSingleObjectModNoLockBase.bin -t 8 -size 1 -l 100000 -l1 10000 -l2 10000 -p 90
 ** 
 ** build:
 ** javac readFromFile.java
 **
 **
 ** run :
 ** java readFromFile <filename> > log_filename
 ** for e.g. java readFromFile test_0 > log_test_0
 **
 **/

import java.io.*;


public class readFromFile {
  public static void main(String[] args) {
    for (int i = 0; i < args.length; i++)
      System.out.println(args[i]);
    File file = new File(args[0]);
    try {
      FileInputStream fin = new FileInputStream(file);
      byte[] b1 = new byte[4];
      byte[] b2 = new byte[8];
      int start = 0;
      int stop = 12500; //  Note: l/NUMTHREADS (number of iterations (-l) / num of threads)
      for(int i = 0;i<(7*(stop-start))+3; i++) {
        fin.read(b1);
        int event = convertToInt(b1);
        System.out.print("Event= " + event + " ");
        fin.read(b2);
        long time = convertToLong(b2);
        System.out.println("Time= " + time);
      }
      fin.close();
    } catch(FileNotFoundException e) {
      System.out.println("File " + file.getAbsolutePath() +
          " could not be found on filesystem");
    } catch(IOException ioe)
    {
      System.out.println("Exception while reading the file" + ioe);
    }
  }

  static int convertToInt(byte[] b) {
    int value = 0;
    for (int i = 0; i < 4; i++) {
      int shift = (4 - 1 - i) * 8;
      value += (b[i] & 0x000000FF) << shift;
    }
    return value;
  }

  static long convertToLong (byte[] buf)
  {
    return (((long)(buf [0] & 0xff) << 56) |
        ((long)(buf [1] & 0xff) << 48) |
        ((long)(buf [2] & 0xff) << 40) |
        ((long)(buf [3] & 0xff) << 32) |
        ((long)(buf [4] & 0xff) << 24) |
        ((long)(buf [5] & 0xff) << 16) |
        ((long)(buf [6] & 0xff) <<  8) |
        ((long)(buf [7] & 0xff)));
  }
}
